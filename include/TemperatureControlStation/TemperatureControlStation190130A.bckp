#ifndef __TEMPERATURE_CONTROL_STATION_H__
#define __TEMPERATURE_CONTROL_STATION_H__

#ifdef __TEST_MODE__

#include <AbstractDevice.h>
#include "MockMillis.h"
#include "MockCommon.h"

#endif

#include "Sensors/AbstractHumiditySensor.h"
#include "Sensors/AbstractTemperatureSensor.h"
#include "Storage/AbstractConfigurationStorage.h"
#include "TemperatureControlSettings.h"

class TemperatureControlStation {
private:
    AbstractConfigurationStorage *storagePointer;

    AbstractHumiditySensor *ambientHumiditySensorPointer = nullptr;
    AbstractTemperatureSensor *ambientTemperatureSensorPointer = nullptr;
    AbstractTemperatureSensor *systemTemperatureSensorPointer = nullptr;
    AbstractTemperatureSensor *waterTemperatureSensorPointer = nullptr;

    bool hasAmbientHumiditySensor = false;
    bool hasAmbientTemperatureSensor = false;
    bool hasSystemTemperatureSensor = false;
    bool hasWaterTemperatureSensor = false;

    AbstractDevice *waterHeatingDevicePointer = nullptr;
    AbstractDevice *waterCoolingDevicePointer = nullptr;

    bool hasWaterHeatingDevice = true;
    bool hasWaterCoolingDevice = true;

    float ambientHumidityPercent = -1.0f;
    float ambientTemperatureCelsius = -1.0f;
    float systemTemperatureCelsius = -1.0f;
    float waterTemperatureCelsius = -1.0f;

    uint32_t sleepStartMillis = 0;
    uint32_t sleepPeriodMillis = 0;

    TemperatureControlSettings settings;  // holds default data

    enum State {
        SLEEPING = false,
        ACTIVE = true,
    } state = ACTIVE;

public:
    explicit TemperatureControlStation(AbstractConfigurationStorage *configurationStoragePointer) :
            storagePointer(configurationStoragePointer) {}

    void attachAmbientHumiditySensor(AbstractHumiditySensor *sensorPointer) {
        ambientHumiditySensorPointer = sensorPointer;
        hasAmbientHumiditySensor = true;
    }

    void attachAmbientTemperatureSensor(AbstractTemperatureSensor *sensorPointer) {
        ambientTemperatureSensorPointer = sensorPointer;
        hasAmbientTemperatureSensor = true;
    }

    void attachSystemTemperatureSensor(AbstractTemperatureSensor *sensorPointer) {
        systemTemperatureSensorPointer = sensorPointer;
        hasSystemTemperatureSensor = true;
    }

    void attachWaterTemperatureSensor(AbstractTemperatureSensor *sensorPointer) {
        waterTemperatureSensorPointer = sensorPointer;
        hasWaterTemperatureSensor = true;
    }

    void attachWaterCoolingDevice(AbstractDevice *devicePointer) {
        waterCoolingDevicePointer = devicePointer;
        hasWaterCoolingDevice = true;
    }

    void attachWaterHeatingDevice(AbstractDevice *devicePointer) {
        waterHeatingDevicePointer = devicePointer;
        hasWaterHeatingDevice = true;
    }

    void sleep(uint32_t sleepMinutes) {
        //
        state = State::SLEEPING;
        sleepPeriodMillis = sleepMinutes * 60ul * 1000ul;
        sleepStartMillis = millis();
    }

    void wake() {
        state = State::ACTIVE;
    }

    void setHeatingControlEnabled(bool isEnabled) {
        //
        settings.isWaterHeatingControlEnabled = isEnabled;
        storagePointer->saveTemperatureControlSettings(settings);
    }

    void setCoolingControlEnabled(bool isEnabled) {
        //
        settings.isWaterCoolingControlEnabled = isEnabled;
        storagePointer->saveTemperatureControlSettings(settings);
    }

    bool setStopHeatingTemperatureCelsius(uint8_t temperatureCelsius) {
        //
        if (temperatureCelsius <= settings.startWaterCoolingTemperatureCelsius) {
            settings.stopWaterHeatingTemperatureCelsius = temperatureCelsius;
            storagePointer->saveTemperatureControlSettings(settings);
            return true;
        } else {
            return false;
        }
    }

    bool setStartCoolingTemperatureCelsius(uint8_t temperatureCelsius) {
        //
        if (temperatureCelsius >= settings.stopWaterHeatingTemperatureCelsius) {
            settings.startWaterCoolingTemperatureCelsius = temperatureCelsius;
            storagePointer->saveTemperatureControlSettings(settings);
            return true;
        } else {
            return false;
        }
    }

    float getWaterTemperatureCelsius() {
        return waterTemperatureCelsius;
    }

    float getAmbientTemperatureCelsius() {
        return ambientTemperatureCelsius;
    }

    float getAmbientHumidityPercent() {
        return ambientHumidityPercent;
    }

    void startHeating() {
        digitalWrite(heatingRelayPin, HIGH);
        isHeaterOn = true;
    }

    void stopHeating() {
        digitalWrite(heatingRelayPin, LOW);
        isHeaterOn = false;
    }

    void startCooling() {
        digitalWrite(coolingRelayPin, LOW);
        isCoolingOn = true;
    }

    void stopCooling() {
        digitalWrite(coolingRelayPin, HIGH);
        isCoolingOn = false;
    }

    void setup() {
        //
        /* read configuration from storagePointer */
        if (storagePointer->isStoredDataValid()) {
            settings = storagePointer->readTemperatureControlSettings(settings);
        }

        /* 
            configure the heating relay pin
            heater is ON by default, wire it to the normally closed - NC port of the relay
            reverse the logic if local climate requires otherwise
        */
        pinMode(heatingRelayPin, OUTPUT);
        digitalWrite(heatingRelayPin, HIGH);
        isHeaterOn = true;

        /* 
            configure the cooling relay pin
            cooling is OFF by default, wire it to the normally open - NO port of the relay
            reverse the logic if local climate requires otherwise
        */
        pinMode(coolingRelayPin, OUTPUT);
        digitalWrite(coolingRelayPin, HIGH);
        isCoolingOn = false;

        state = State::ACTIVE;
    }

    void update(uint32_t currentMillis) {
        //
        switch (state) {
            //
            case State::ACTIVE:

                /* read system temperature and humidity sensor */
                ambientTemperatureAndHumiditySensorPointer.update(currentMillis);
                ambientTemperatureCelsius = ambientTemperatureAndHumiditySensorPointer.getTemperatureCelsius();
                ambientHumidityPercent = ambientTemperatureAndHumiditySensorPointer.getHumidityPercent();

                /* read sump water temperature sensor */
                waterTemperatureSensorPointer.update(currentMillis);
                waterTemperatureCelsius = waterTemperatureSensorPointer.getTemperatureCelsius();

                /* heater control */
                if (settings.isWaterHeatingControlEnabled) {
                    if ((waterTemperatureCelsius > settings.stopWaterHeatingTemperatureCelsius) && isHeaterOn) {
                        stopHeating();
                    } else if ((waterTemperatureCelsius < settings.stopWaterHeatingTemperatureCelsius) && !isHeaterOn) {
                        startHeating();
                    }
                }

                /* cooling control */
                if (settings.isWaterCoolingControlEnabled) {
                    if ((waterTemperatureCelsius > settings.startWaterCoolingTemperatureCelsius) && !isCoolingOn) {
                        startCooling();
                    } else if ((waterTemperatureCelsius < settings.startWaterCoolingTemperatureCelsius) && isCoolingOn) {
                        stopCooling();
                    }
                }

                break;

            case State::SLEEPING:

                if ((currentMillis - sleepStartMillis) > sleepPeriodMillis) {
                    state = State::ACTIVE;
                }

                break;
        }
    }
};

#endif
